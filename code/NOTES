################################################################################
NOTES COMPILER/EMULATOR
################################################################################
* namespaces with nested namespaces of the same name produce errors
    * occurred when importing module bitwise into namespace bitwise
# function bodies without dependencies in importing namespaces case KeyError

################################################################################
NOTES ON CODING STYLE
################################################################################

* namespace hiding: functions written in COW must often modify the stack and 
    otherwise alter normal program flow in order to achieve the desired result.
    One side effect of this is functions which must be called in a specific
    order, as they rely on non-standard stack behavior executed in related code.
    These non-atomic functions should not be exposed in the base namespace.
    Multi-part function executions should be hidden in nested namespaces and 
    called upon by functions in the base namespace, which allows modules to 
    make use of non-atomic behavior without exposing non-atomic components to
    importing modules.
    * An example of this behavior can be found below, in which a self-calling
        function crams data onto the stack. Importing modules should not have to
        wrangle this behavior directly. Instead, a caller function is exposed in 
        the base namespace, which creates a workspace for the recursor. The 
        function performing most of the work is hidden, along with its cleanup 
        routine, in a nested namespace, preventing calling modules from directly
        accessing sensitive functions.


Apply function to specified number of adjacent cells
* self-calling function that carries a loop condition along with it 
* hides data underneath the call stack
* cleanup function writes results back to cells

loopTemplate{           # recursive "for" loop -> apply fn to adjacent cells
    # we expect the loop counter to be in the cell we start in
    > ATOMIC_OP PACK        # do some atomic evaluation, cram result onto stack
    < rcopy                 # copy counter into cell we extracted
    -^[                     # call the next block if counter is nonzero
        _                   # unpack
        call{loopTemplate}  # overwrites old counter
        ^[-]                # (exit)
    ]_                      # unpack counter into current cell
    PUSH NOT [              # run this loop if the counter is zero
        POP                 # pop the zero -> overwrite entry condition
        call{loopCleaner}   # run the cleanup function
        PUSH                # replace the zero
    ] POP                   # restore the value we NOTed
}

loopCleaner{
    rUNPACK(8)
}

binding rUNPACK { < UNPACK  }
binding PACK    {   PUSH    }
